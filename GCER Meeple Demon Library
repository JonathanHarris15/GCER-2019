/*
THIS CODE WAS WRITTEN BY JONATHAN HARRIS FOR THE 2019 BOTBALL COMPETITION SEASON, THIS SPECIFIC VERSION OF THE CODE IS FOR 
THE GLOBAL CONFERENCE OF EDUCATIONAL ROBOTICS IN NORMAN OKLAHOMA. 
*/


#define RIGHT 3
#define LEFT 0

#define yellow 0
#define red 1
#define blue 2

int ninty;

int analogValMass;
int analogCounter;
int analogValAvg;

float last_error;
int bias;
int theta;
int error;
float sum_error;

float tower_val;


//GYRO TURN *******************************************

float tspeed;
float integral;

//P
float tkp; 
float proportional;

//I
float tki; 

//D
float derivative;
float tkd; 

//GYRO DRIVE STRAIGHT****************************************************

int target_theta;
int turn_error;
int drive_error;
int turn_sum_error;
int drive_sum_error;
int turn_last_error;
int drive_last_error;


float speed_l;
float speed_r;

float turn_speed;
float turn_speed;  

float drive_speed;
float drive_speed;

//P
float turn_proportional,tp;
float drive_proportional,dp;

//I
float turn_integral,ti;
float drive_integral,di;

//D
float turn_derivative,td;
float drive_derivative,dd;


//FUNCTION CALLS *********************************************
void calibrate_gyros();
void gyro_turn_right_PID();
void create_drive_PID();

int white_value;
int black_value;
int middle_value;
float slope;
int anval;
float a_speed;
float b_speed;
int line_follow_error;
int line_follow_error_sum;
int line_follow_p;
float line_follow_i;
float line_follow_kp;
float line_follow_ki;

int squarerspeed;
int squarelspeed;

//slow servo
int servoPos;
//drive until change
int start_state;
int laps;
//camera code
int blobArea;
int blobAvg;
int blobCount = 0;
int blobRaw = 0;


void servo(int port, int pos)
{

    
    set_servo_position(port,pos);
    msleep(500);
   

}


void wait(int sleep){
   
    create_drive_direct(0,0);
    msleep(sleep/2);
    motor(0,0);
    motor(3,0);
    motor(2,0);
    motor(1,0);
    msleep(sleep/2);
    
    
    
}


void slow_servo(int pos, int speedStall, int port){
    

    servoPos = get_servo_position(port);
    while(servoPos != pos){
        
        if(servoPos < pos){
            servoPos = servoPos + 1;
        }else{
            servoPos = servoPos - 1;
        }
        
        set_servo_position(port,servoPos);
        msleep(speedStall);
        
    }

  
    
    
    
}
void drive_until_change_digital(int digital_port, int motor_port,int motor_speed)
{
    
    start_state = digital(digital_port);
    laps = 0;
    while(start_state == digital(digital_port))
    {
        
        mav(motor_port,motor_speed + (laps/6) + 50);
        laps ++;
        
    }
    wait(2);
}
int wait_for_button_input(){
    
    int button_pressed = 0;
    int button_right = 0;
    int button_left = 0;
    while(button_pressed == 0){
        if(right_button() == 1){
          
            button_pressed = 1;
            button_right = 1;
            
        }
        if(left_button() == 1){
            button_pressed = 1;
            button_left = 1;
        }
    }
    msleep(750);
    if(button_right == 1){
        return 0;
    }else if(button_left == 1){
        return 1;
    }else{
        return 3;
    }
}

void callibrate_blacknwhite(int port){
    
    printf("Please place the robots light sensor on a black line and\n press one of the buttons on the wallaby.\n");
    wait_for_button_input();
    black_value = analog(port);
    printf("your value was: %d \n if you would like to change the value then please stop the program and restart.\n",black_value);
    printf("Otherwise please press either of the buttons again while\n the robot's light sensor is on a white suface of the table.\n");
    wait_for_button_input();
    white_value = analog(port);
    console_clear();
    printf("your white value was: %d \n if you would like to change the value then please stop the program and restart.\n",white_value);
    msleep(5000);
    console_clear();
    middle_value = ((white_value + black_value)/2);
    printf("your middle value was: %d \n you are now ready to go! \n",middle_value); 
    msleep(1000);
    printf("press the button again to continue.\n");
    wait_for_button_input();
    console_clear();
        
}

void create_line_follow(int port, int target_speed, int dist){
    
    set_create_distance(0);
    slope = 0.6;
    line_follow_kp = 0.017;
    line_follow_ki = 0.0;
    
    while(get_create_distance() > -dist){
        
        line_follow_error = analog(port) - middle_value;
        line_follow_error_sum += line_follow_error;
        line_follow_p = line_follow_error * line_follow_kp;
        line_follow_i = line_follow_error_sum * line_follow_ki;
        
        a_speed = -(line_follow_p + line_follow_ki) + target_speed;
        b_speed = (line_follow_p + line_follow_ki) + target_speed;
        
        create_drive_direct(-a_speed,-b_speed);
       
        
        
    }
}
    
void calibrate_gyros(){
    int i=0;
    int sum=0;
    
    while(i<100){
        
        sum += gyro_z();
        msleep(5);
        i++;
    }
    bias = sum/100;
        printf("bias: %d\n",bias);
}

void gyro_turn_PID_right(int target_theta){
    
    
    calibrate_gyros();
    
    theta = 0;
    error = 0;
    sum_error = 0;
    last_error = 0;
    tkp = 0.013;
    tki = 0.00004;
    tkd = 1500;
    
    while(theta < target_theta - 1){
        
        error = target_theta - theta;
        
        // P
        proportional = error * tkp;
        
        //I
        sum_error = sum_error + error;
        integral = sum_error * tki;
        
        //D
        derivative = (error - last_error) * tkp;

        tspeed = proportional + integral + derivative;
        
        create_drive_direct(tspeed, -tspeed);
        
        msleep(15);
        
        last_error = error;
        
        theta = theta + abs((gyro_z() - bias));
        
        
    }
    wait(5);
    printf("My failure level was %d", target_theta - theta);
}

void gyro_turn_PID_left(int target_theta){
    
    
    calibrate_gyros();
    
    theta = 0;
    error = 0;
    sum_error = 0;
    last_error = 0;
    tkp = 0.013;
    tki = 0.00004;
    tkd = 1500;
    
    while(theta < target_theta){
        
        error = target_theta - theta;
        
        // P
        proportional = error * tkp;
        
        //I
        sum_error = sum_error + error;
        integral = sum_error * tki;
        
        //D
        derivative = (error - last_error) * tkp;

        tspeed = proportional + integral + derivative;
        
        create_drive_direct(-tspeed, tspeed);
        
        msleep(15);
        
        last_error = error;
        
        theta = theta + abs((gyro_z() - bias));
        printf("%d\n",theta);
        
    }
    wait(5);
    printf("My failure level was %d", target_theta - theta);
}

void create_drive_PID(int dist,int speed){
 
    set_create_distance(0);
    calibrate_gyros();
    
    target_theta = 0;
    //calculating the multipliers for both PID controllers 
    	//proportional
        tp = 0.015;
        dp = 0;
    	
    	//integral
        ti = 0.0004;
        di = 0;
    
    	//derivative
        td = 1;
        dd = 0;
    
    while(get_create_distance() > -dist){
        
        //turn error calculation
        turn_error = gyro_z() - bias;
        turn_sum_error = turn_sum_error + turn_error;
        
        //turn proportional
        turn_proportional = turn_error * tp;
        
        //turn integral
        turn_integral = turn_sum_error * ti;
        
        //turn derivative 
        turn_derivative = (turn_last_error - turn_error) * td;
        
        //last error calculation for the turn PID
        turn_last_error = turn_error;
        
        //final turn PID calculation 
        turn_speed = turn_proportional + turn_integral + turn_derivative;
        
        //final wheel speeds
        speed_l = -turn_speed + speed;
        speed_r = turn_speed + speed;
        
        //moving the wheels
        create_drive_direct(-speed_l,-speed_r);
      
        
    }
    
    
}
void create_drive_PID_back(int dist,int speed){
 
    set_create_distance(0);
    calibrate_gyros();
    
    target_theta = 0;
    //calculating the multipliers for both PID controllers 
    	//proportional
        tp = 0.015;
        dp = 0;
    	
    	//integral
        ti = 0.0004;
        di = 0;
    
    	//derivative
        td = 1;
        dd = 0;
    
    while(get_create_distance() < dist){
        
        //turn error calculation
        turn_error = gyro_z() - bias;
        turn_sum_error = turn_sum_error + turn_error;
        
        //turn proportional
        turn_proportional = turn_error * tp;
        
        //turn integral
        turn_integral = turn_sum_error * ti;
        
        //turn derivative 
        turn_derivative = (turn_last_error - turn_error) * td;
        
        //last error calculation for the turn PID
        turn_last_error = turn_error;
        
        //final turn PID calculation 
        turn_speed = turn_proportional + turn_integral + turn_derivative;
        
        //final wheel speeds
        speed_l = turn_speed + speed;
        speed_r = -turn_speed + speed;
        
        //moving the wheels
        create_drive_direct(speed_l,speed_r);
      
        
    }
    
    
}
void create_square_up(int speed){
    
    
    int speeda;
    int speedb;
    theta = 0;
    calibrate_gyros();
    
    while(get_create_lfcliff_amt() > 1600 || get_create_rfcliff_amt() > 1600){
        
        
        theta = theta + (gyro_z() - bias);
        
        speeda = theta * 0.05;
        speedb = theta * -0.05;
        
        if(get_create_lfcliff_amt() > 1600){
            
            printf("l%d\n",get_create_lfcliff_amt());
            squarelspeed = speeda + speed;
            
        }else{
         
            squarelspeed = 0;
            
        }
        if(get_create_rfcliff_amt() > 1600){
         
            printf("r%d\n",get_create_rfcliff_amt());
            squarerspeed = speedb + speed;
            
        }else{
            
            squarerspeed = 0;
            
        }
        create_drive_direct(squarelspeed,squarerspeed);
        
        msleep(15);
    }
    
}
void create_square_up_back(int speed){
    
    
    int speeda;
    int speedb;
    theta = 0;
    calibrate_gyros();
    
    while(get_create_lfcliff_amt() > 1600 || get_create_rfcliff_amt() > 1600){
        
        
        theta = theta + (gyro_z() - bias);
        
        speeda = theta * -0.05;
        speedb = theta * 0.05;
        
        if(get_create_lfcliff_amt() > 1600){
            
            printf("l%d\n",get_create_lfcliff_amt());
            squarelspeed = speeda + speed;
            
        }else{
         
            squarelspeed = 0;
            
        }
        if(get_create_rfcliff_amt() > 1600){
         
            printf("r%d\n",get_create_rfcliff_amt());
            squarerspeed = speedb + speed;
            
        }else{
            
            squarerspeed = 0;
            
        }
        create_drive_direct(-squarelspeed,-squarerspeed);
        
        msleep(15);
    }
    
}






    

int getAnalogAverage(int port, int laps)
{
    
    analogValMass = 0;
    analogCounter = 0;
    while(analogCounter < laps)
    {
        
     	analogValMass = analogValMass + analog(port);
        analogCounter ++;
        
    }
    analogValAvg = analogValMass / laps;
    printf("%d \n",analogValAvg);
    return analogValAvg;
    
    
}
int colorSense(int color, int loops) {

    camera_open_black();
    blobCount = 0;
    blobRaw = 0;
    
    while(blobCount < loops){

        camera_update();
        if(color == 0){
            if(get_object_confidence(yellow,0) > 0.4){
                blobRaw = blobRaw + 1;
            } 
        }

        if(color == 1){
            if(get_object_confidence(blue,0) > 0.4){
                blobRaw = blobRaw + 1; 
            }
        }

        if(color == 2){
            if(get_object_confidence(red,0) > 0.4){
                blobRaw = blobRaw + 1; 
            }

        }
        blobCount = blobCount + 1;

    }



    if(blobRaw > loops * 65/100){
        return 0;
    }else{
        return 1;
    }

}
    


int getAnalogAverageDos(int port, int porttwo, int laps)
{
    
    analogValMass = 0;
    analogCounter = 0;
    while(analogCounter < laps)
    {
        
     	analogValMass = analogValMass + analog(port) + analog(porttwo);
        analogCounter ++;
        
    }
    analogValAvg = analogValMass / (laps * 2);
    printf("%d \n",analogValAvg);
    return analogValAvg;
    
    
}


    


void gyro_turn_PID_left_slow(int target_theta){
    
    
    calibrate_gyros();
    
    theta = 0;
    error = 0;
    sum_error = 0;
    last_error = 0;
    tkp = 0.009;
    tki = 0.00004;
    tkd = 1500;
    
    while(theta < target_theta){
        
        error = target_theta - theta;
        
        // P
        proportional = error * tkp;
        
        //I
        sum_error = sum_error + error;
        integral = sum_error * tki;
        
        //D
        derivative = (error - last_error) * tkp;

        tspeed = proportional + integral + derivative + 50;
        
        create_drive_direct(-tspeed, tspeed);
        
        msleep(15);
        
        last_error = error;
        
        theta = theta + abs((gyro_z() - bias));
        printf("%d\n",theta);
        
    }
    wait(5);
    printf("My failure level was %d", target_theta - theta);
}
void gyro_turn_PID_right_slow(int target_theta){
    
    
    calibrate_gyros();
    
    theta = 0;
    error = 0;
    sum_error = 0;
    last_error = 0;
    tkp = 0.009;
    tki = 0.00004;
    tkd = 1500;
    
    while(theta < target_theta - 1){
        
        error = target_theta - theta;
        
        // P
        proportional = error * tkp;
        
        //I
        sum_error = sum_error + error;
        integral = sum_error * tki;
        
        //D
        derivative = (error - last_error) * tkp;

        tspeed = proportional + integral + derivative + 50;
        
        create_drive_direct(tspeed, -tspeed);
        
        msleep(15);
        
        last_error = error;
        
        theta = theta + abs((gyro_z() - bias));
        
        
    }
    wait(5);
    printf("My failure level was %d", target_theta - theta);
}
